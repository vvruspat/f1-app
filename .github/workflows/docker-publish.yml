name: Build and Push Docker images to ECR

on:
  workflow_run:
    workflows: ["Lint and Test"]
    types:
      - completed
    branches:
      - main

env:
  AWS_REGION: eu-central-1
  AWS_ACCOUNT_ID: 459205453152
  ECR_BASE_REPO: f1app/base-builder
  ECR_FRONTEND_REPO: f1app/frontend
  ECR_BACKEND_REPO: f1app/backend
  ECR_DOCS_REPO: f1app/docs
  ECS_FRONTEND_CLUSTER: f1app-frontend
  ECS_BACKEND_CLUSTER: f1app-backend
  ECS_FRONTEND_SERVICE: f1-app-frontend-task-service
  ECS_DOCS_SERVICE: f1-app-app-docs-task-service
  ECS_BACKEND_SERVICE: f1-app-backend-task-service

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # ----------------------
      # Build and Push Builder Base
      # ----------------------
      - name: Build and push base builder image
        run: |
            docker build -f Dockerfile.builder-base \
            --build-arg TURBO_TOKEN=${{ secrets.VERCEL_TOKEN }} \
            --build-arg TURBO_TEAM=${{ vars.TURBO_TEAM }} \
            --build-arg TURBO_CACHE=remote:rw \
            --build-arg SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }} \
            -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_BASE_REPO:latest .
            docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_BASE_REPO:latest

      # ----------------------
      # Build and Push Frontend
      # ----------------------
      - name: Build and push frontend image
        run: |
          docker build -f Dockerfile.frontend \
            -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_FRONTEND_REPO:latest .

          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_FRONTEND_REPO:latest

      # ----------------------
      # Build and Push Documentation
      # ----------------------
      - name: Build and push docs image
        run: |
          docker build -f Dockerfile.docs \
            -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_DOCS_REPO:latest .

          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_DOCS_REPO:latest

      # ----------------------
      # Build and Push Backend
      # ----------------------
      - name: Build and push backend image
        run: |
          docker build -f Dockerfile.backend \
            -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_BACKEND_REPO:latest .

          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_BACKEND_REPO:latest

      # ----------------------
      # Deploy to ECS - Frontend
      # ----------------------
      - name: Force new deployment of frontend service
        run: |
          aws ecs update-service \
            --cluster $ECS_FRONTEND_CLUSTER \
            --service $ECS_FRONTEND_SERVICE \
            --force-new-deployment

      # ----------------------
      # Deploy to ECS - Docs
      # ----------------------
      - name: Force new deployment of docs service
        run: |
          aws ecs update-service \
            --cluster $ECS_FRONTEND_CLUSTER \
            --service $ECS_DOCS_SERVICE \
            --force-new-deployment

      # ----------------------
      # Deploy to ECS - Backend
      # ----------------------
      - name: Force new deployment of backend service
        run: |
          aws ecs update-service \
            --cluster $ECS_BACKEND_CLUSTER \
            --service $ECS_BACKEND_SERVICE \
            --force-new-deployment